import {
  AptosAccount,
  AptosClient,
} from 'aptos';

export async function signAndSendTransaction(
  client: AptosClient,
  transaction: any,
  signer: AptosAccount,
): Promise<void> {
  const bcsTxn = await client.signTransaction(signer, transaction);
  const pendingTxn = await client.submitTransaction(bcsTxn);
  const completedTxn = await client.waitForTransactionWithResult(pendingTxn.hash);
  if (completedTxn.type == 'user_transaction') {
    const userTxn = (completedTxn as any) as UserTransaction;
    if (!userTxn.success) {
      throw new Error(`Transaction ${userTxn.hash} committed to the blockchain but execution failed.\n     REASON: ${userTxn.vm_status}`);
    }
  }
}

class UserTransaction {
  version: string;
  hash: string;
  state_change_hash: string;
  event_root_hash: string;
  state_checkpoint_hash?: string;
  gas_used: string;
  /**
   * Whether the transaction was successful
   */
  success: boolean;
  /**
   * The VM status of the transaction, can tell useful information in a failure
   */
  vm_status: string;
  accumulator_root_hash: string;
  /**
   * Final state of resources changed by the transaction
   */
  // changes: Array<WriteSetChange>;
  // sender: Address;
  sequence_number: string;
  max_gas_amount: string;
  gas_unit_price: string;
  expiration_timestamp_secs: string;
  payload: any;
  signature?: any;
  /**
   * Events generated by the transaction
   */
  events: Array<Event>;
  timestamp: string;
};

declare type Event = {
  guid: string;
  sequence_number: string;
  type: string;
  /**
   * The JSON representation of the event
   */
  data: any;
};
